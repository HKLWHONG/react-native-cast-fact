/**
 * @format
 * @flow strict-local
 */

import React from 'react';
import { StyleSheet } from 'react-native';

import { connect } from 'react-redux';
import { AppAction, TemplateAction } from '../../redux';

import { BaseComponent, Root, Header, Body, Footer } from '../../components';
import { NetworkErrorView } from '../../project-components';

import i18n from '../../../i18n';
import { Translation } from 'react-i18next';

import { Constants } from '../../constants';
import { Network, Theme } from '../../utils';

class TemplateView extends BaseComponent {
  constructor(props) {
    super(props);
  }

  componentDidMount() {
    super.componentDidMount();

    const { props } = this;

    props.onNetworkChanged((state) => {
      if (state.isConnected) {
        this.initialize();
      }
    });

    this.initialize();
  }

  componentWillUnmount() {
    super.componentWillUnmount();

    this.clearData();
  }

  initialize = () => {};

  clearData = () => {
    const { props } = this;

    props.onNetworkChanged(undefined);
  };

  renderHeader = () => {
    const { props } = this;

    const theme = props.theme || {};

    return (
      <Translation>
        {(t) => (
          <Header
            style={styles.header}
            hidden={!props.networkErrorViewProps.hidden}
          />
        )}
      </Translation>
    );
  };

  renderBody = () => {
    const { props } = this;

    const theme = props.theme || {};

    return (
      <Translation>
        {(t) => (
          <Body
            style={styles.body}
            hidden={!props.networkErrorViewProps.hidden}
          />
        )}
      </Translation>
    );
  };

  renderFooter = () => {
    const { props } = this;

    const theme = props.theme || {};

    return (
      <Translation>
        {(t) => (
          <Footer
            style={styles.footer}
            hidden={!props.networkErrorViewProps.hidden}
          />
        )}
      </Translation>
    );
  };

  renderNetworkErrorView = () => {
    const { props } = this;

    return (
      <Translation>
        {(t) => (
          <NetworkErrorView
            tyle={styles.networkError}
            hidden={props.networkErrorViewProps.hidden}
            message={t('app.error.network')}
            onPress={() => {
              Network.retry();
            }}
          />
        )}
      </Translation>
    );
  };

  render() {
    const { props } = this;

    const theme = props.theme || {};

    return (
      <Translation>
        {(t) => (
          <Root style={styles.root}>
            {this.renderHeader()}
            {this.renderBody()}
            {this.renderFooter()}
            {this.renderNetworkErrorView()}
          </Root>
        )}
      </Translation>
    );
  }
}

const styles = StyleSheet.create({
  root: {},
  header: {},
  body: {},
  footer: {},
  networkError: {},
});

function mapStateToProps(state) {
  return {
    theme: state.themeReducer.TemplateView,
    networkErrorViewProps: state.appReducer.networkErrorViewProps,
  };
}

function mapDispatchToProps(dispatch) {
  return {
    onNetworkChanged: (...args) =>
      dispatch(AppAction.onNetworkChanged(...args)),
  };
}

export default connect(mapStateToProps, mapDispatchToProps)(TemplateView);
