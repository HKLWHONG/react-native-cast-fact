/**
 * @format
 * @flow strict-local
 */

import { PropTypes } from 'react';

import Environment from '../config/Environment';

import * as Request from './Request';
import * as Header from './Header';

import { store, AppAction } from '../redux';

import { Common } from '../utils';

const IDENTIFIER = 'TemplateAPI';
const URL = Environment.API_URL + '/template';

export const request = (
  props: PropTypes.object.isRequired,
  query?: PropTypes.object.isRequired,
  body?: PropTypes.object.isRequired,
  options?: PropTypes.object.isRequired,
): Promise<void> => {
  return new Promise(async (resolve, reject) => {
    Request.request(
      props,
      IDENTIFIER,
      URL,
      '${method}',
      await Header.getAuthHeader(),
      query,
      body,
      options,
    )
      .then((json) => {
        if (json && json.xxxDTO) {
          resolve(json);
        } else {
          const message = Common.getAPIErrorMessage(json);

          store.dispatch(AppAction.showPullDownMessageBox(message));

          reject(message);
        }
      })
      .catch((error) => {
        reject(error);
      })
      .done();
  });
};
